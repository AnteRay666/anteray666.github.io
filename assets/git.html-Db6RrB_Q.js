import{_ as d,c as r,b as i,o as e}from"./app-CYyOMjO4.js";const g="/assets/image2-CDWvboDe.jpg",o={};function a(s,t){return e(),r("div",null,t[0]||(t[0]=[i('<h1 id="git-的使用。" tabindex="-1"><a class="header-anchor" href="#git-的使用。"><span>Git 的使用。</span></a></h1><p><img src="'+g+'" alt="alt text"></p><p><code>git init</code>初始化仓库。注意，这里会在本目录下生成一个.git 文件夹。</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git init</td><td># 初始化本地 git 仓库（创建新仓库）</td></tr><tr><td>git config --global user.name &quot;xxx&quot;</td><td># 配置用户名</td></tr><tr><td>git config --global user.email &quot;xxx@xxx.com&quot;</td><td># 配置邮件</td></tr><tr><td>git config --global color.ui true</td><td># git status 等命令自动着色</td></tr><tr><td>git config --global color.status auto</td><td></td></tr><tr><td>git config --global color.diff auto</td><td></td></tr><tr><td>git config --global color.branch auto</td><td></td></tr><tr><td>git config --global color.interactive auto</td><td></td></tr><tr><td>git config --global --unset http.proxy</td><td># remove proxy configuration on git</td></tr><tr><td>git clone git+ssh://git@192.168.53.168/VT.git</td><td># clone 远程仓库</td></tr><tr><td>git status</td><td># 查看当前版本状态（是否修改）</td></tr><tr><td>git add xyz</td><td># 添加 xyz 文件至 index</td></tr><tr><td>git add .</td><td># 增加当前子目录下所有更改过的文件至 index</td></tr><tr><td>git commit -m &#39;xxx&#39;</td><td># 提交</td></tr><tr><td>git commit --amend -m &#39;xxx&#39;</td><td># 合并上一次提交（用于反复修改）</td></tr><tr><td>git commit -am &#39;xxx&#39;</td><td># 将 add 和 commit 合为一步</td></tr><tr><td>git rm xxx</td><td># 删除 index 中的文件</td></tr><tr><td>git rm -r *</td><td># 递归删除</td></tr><tr><td>git log</td><td># 显示提交日志</td></tr><tr><td>git log -1</td><td># 显示 1 行日志 -n 为 n 行</td></tr><tr><td>git log -5</td><td></td></tr><tr><td>git log --stat</td><td># 显示提交日志及相关变动文件</td></tr><tr><td>git log -p -m</td><td></td></tr><tr><td>git show dfb02e6e4f2f7b573337763e5c0013802e392818</td><td># 显示某个提交的详细内容</td></tr><tr><td>git show dfb02</td><td># 可只用 commitid 的前几位</td></tr><tr><td>git show HEAD</td><td># 显示 HEAD 提交日志</td></tr><tr><td>git show HEAD^</td><td># 显示 HEAD 的父（上一个版本）的提交日志 ^^为上两个版本 ^5 为上 5 个版本</td></tr><tr><td>git tag</td><td># 显示已存在的 tag</td></tr><tr><td>git tag -a v2.0 -m &#39;xxx&#39;</td><td># 增加 v2.0 的 tag</td></tr><tr><td>git show v2.0</td><td># 显示 v2.0 的日志及详细内容</td></tr><tr><td>git log v2.0</td><td># 显示 v2.0 的日志</td></tr><tr><td>git diff</td><td># 显示所有未添加至 index 的变更</td></tr><tr><td>git diff --cached</td><td># 显示所有已添加 index 但还未 commit 的变更</td></tr><tr><td>git diff HEAD^</td><td># 比较与上一个版本的差异</td></tr><tr><td>git diff HEAD -- ./lib</td><td># 比较与 HEAD 版本 lib 目录的差异</td></tr><tr><td>git diff origin/master..master</td><td># 比较远程分支 master 上有本地分支 master 上没有的</td></tr><tr><td>git diff origin/master..master --stat</td><td># 只显示差异的文件，不显示具体内容</td></tr><tr><td>git remote add origin git+ssh://git@192.168.53.168/VT.git</td><td># 增加远程定义（用于 push/pull/fetch）</td></tr><tr><td>git branch</td><td># 显示本地分支</td></tr><tr><td>git branch --contains 50089</td><td># 显示包含提交 50089 的分支</td></tr><tr><td>git branch -a</td><td># 显示所有分支</td></tr><tr><td>git branch -r</td><td># 显示所有原创分支</td></tr><tr><td>git branch --merged</td><td># 显示所有已合并到当前分支的分支</td></tr><tr><td>git branch --no-merged</td><td># 显示所有未合并到当前分支的分支</td></tr><tr><td>git branch -m master master_copy</td><td># 本地分支改名</td></tr><tr><td>git checkout -b master_copy</td><td># 从当前分支创建新分支 master_copy 并检出</td></tr><tr><td>git checkout -b master master_copy</td><td># 上面的完整版</td></tr><tr><td>git checkout features/performance</td><td># 检出已存在的 features/performance 分支</td></tr><tr><td>git checkout --track hotfixes/BJVEP933</td><td># 检出远程分支 hotfixes/BJVEP933 并创建本地跟踪分支</td></tr><tr><td>git checkout v2.0</td><td># 检出版本 v2.0</td></tr><tr><td>git checkout -b devel origin/develop</td><td># 从远程分支 develop 创建新本地分支 devel 并检出</td></tr><tr><td>git checkout -- README</td><td># 检出 head 版本的 README 文件（可用于修改错误回退）</td></tr><tr><td>git merge origin/master</td><td># 合并远程 master 分支至当前分支</td></tr><tr><td>git cherry-pick ff44785404a8e</td><td># 合并提交 ff44785404a8e 的修改</td></tr><tr><td>git push origin master</td><td># 将当前分支 push 到远程 master 分支</td></tr><tr><td>git push origin :hotfixes/BJVEP933</td><td># 删除远程仓库的 hotfixes/BJVEP933 分支</td></tr><tr><td>git push --tags</td><td># 把所有 tag 推送到远程仓库</td></tr><tr><td>git fetch</td><td># 获取所有远程分支（不更新本地分支，另需 merge）</td></tr><tr><td>git fetch --prune</td><td># 获取所有原创分支并清除服务器上已删掉的分支</td></tr><tr><td>git pull origin master</td><td># 获取远程分支 master 并 merge 到当前分支</td></tr><tr><td>git mv README README2</td><td># 重命名文件 README 为 README2</td></tr><tr><td>git reset --hard HEAD</td><td># 将当前版本重置为 HEAD（通常用于 merge 失败回退）</td></tr><tr><td>git rebase</td><td></td></tr><tr><td>git branch -d hotfixes/BJVEP933</td><td># 删除分支 hotfixes/BJVEP933（本分支修改已合并到其他分支）</td></tr><tr><td>git branch -D hotfixes/BJVEP933</td><td># 强制删除分支 hotfixes/BJVEP933</td></tr><tr><td>git ls-files</td><td># 列出 git index 包含的文件</td></tr><tr><td>git show-branch</td><td># 图示当前分支历史</td></tr><tr><td>git show-branch --all</td><td># 图示所有分支历史</td></tr><tr><td>git whatchanged</td><td># 显示提交历史对应的文件修改</td></tr><tr><td>git revert dfb02e6e4f2f7b573337763e5c0013802e392818</td><td># 撤销提交 dfb02e6e4f2f7b573337763e5c0013802e392818</td></tr><tr><td>git ls-tree HEAD</td><td># 内部命令：显示某个 git 对象</td></tr><tr><td>git rev-parse v2.0</td><td># 内部命令：显示某个 ref 对于的 SHA1 HASH</td></tr><tr><td>git reflog</td><td># 显示所有提交，包括孤立节点</td></tr><tr><td>git show HEAD@{5}</td><td></td></tr><tr><td>git show master@{yesterday}</td><td># 显示 master 分支昨天的状态</td></tr><tr><td>git log --pretty=format:&#39;%h %s&#39; --graph</td><td># 图示提交日志</td></tr><tr><td>git show HEAD~3</td><td></td></tr><tr><td>git show -s --pretty=raw 2be7fcb476</td><td></td></tr><tr><td>git stash</td><td># 暂存当前修改，将所有至为 HEAD 状态</td></tr><tr><td>git stash list</td><td># 查看所有暂存</td></tr><tr><td>git stash show -p stash@{0}</td><td># 参考第一次暂存</td></tr><tr><td>git stash apply stash@{0}</td><td># 应用第一次暂存</td></tr><tr><td>git grep &quot;delete from&quot;</td><td># 文件中搜索文本“delete from”</td></tr><tr><td>git grep -e &#39;#define&#39; --and -e SORT_DIRENT</td><td></td></tr><tr><td>git gc</td><td></td></tr><tr><td>git fsck</td><td></td></tr></tbody></table>',4)]))}const m=d(o,[["render",a]]),h=JSON.parse('{"path":"/blogs/programme/git.html","title":"Git 的使用","lang":"en-US","frontmatter":{"title":"Git 的使用","date":"2025-4-29","tags":["git"],"categories":["programme"]},"headers":[],"git":{"createdTime":1746804568000,"updatedTime":1746804568000,"contributors":[{"name":"AnteRay666","email":"3458403927@qq.com","commits":1}]},"filePathRelative":"blogs/programme/git.md"}');export{m as comp,h as data};
