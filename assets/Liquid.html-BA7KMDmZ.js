import{_ as d,c as i,a as e,b as s,d as o,e as n,r as l,o as a}from"./app-D-LXcV_B.js";const p={},u={href:"https://liquid.bootcss.com/basics/introduction/#objects",target:"_blank",rel:"noopener noreferrer"},b={href:"https://liquid.bootcss.com/basics/introduction/#tags",target:"_blank",rel:"noopener noreferrer"},g={href:"https://liquid.bootcss.com/basics/introduction/#filters",target:"_blank",rel:"noopener noreferrer"},c={href:"https://liquid.bootcss.com/basics/types/#string",target:"_blank",rel:"noopener noreferrer"},f={href:"https://liquid.bootcss.com/basics/types/#string",target:"_blank",rel:"noopener noreferrer"},q={href:"https://liquid.bootcss.com/basics/types/#number",target:"_blank",rel:"noopener noreferrer"},m={href:"https://liquid.bootcss.com/basics/types/#boolean",target:"_blank",rel:"noopener noreferrer"},h={href:"https://liquid.bootcss.com/basics/types/#nil",target:"_blank",rel:"noopener noreferrer"},k={href:"https://liquid.bootcss.com/basics/types/#array",target:"_blank",rel:"noopener noreferrer"},y={href:"https://liquid.bootcss.com/tags/variable/#assign",target:"_blank",rel:"noopener noreferrer"},L={href:"https://liquid.bootcss.com/tags/variable/#capture",target:"_blank",rel:"noopener noreferrer"};function x(v,t){const r=l("ExternalLinkIcon");return a(),i("div",null,[t[19]||(t[19]=e("h1",{id:"liquid",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#liquid"},[e("span",null,"Liquid")])],-1)),t[20]||(t[20]=e("p",null,"在 shopify 的开发中,liquid 语言是极为必要的。",-1)),e("p",null,[t[3]||(t[3]=o("Liquid 代码可分为  ")),e("a",u,[t[0]||(t[0]=e("strong",null,"对象（object）",-1)),n(r)]),t[4]||(t[4]=o("、")),e("a",b,[t[1]||(t[1]=e("strong",null,"标记（tag）",-1)),n(r)]),t[5]||(t[5]=o("  和  ")),e("a",g,[t[2]||(t[2]=e("strong",null,"过滤器（filter）",-1)),n(r)]),t[6]||(t[6]=o("。"))]),t[21]||(t[21]=s('<p><strong>对象</strong>  告诉 Liquid 在页面的哪个位置展示内容。对象和变量名由双花括号标识：<code>{{</code>  和  <code>}}</code>。</p><p><strong>标记（tag）</strong>  创造了模板的逻辑和控制流。他们由单括号加百分号标识：<code>{%</code>  和  <code>%}</code></p><p><strong>过滤器</strong>  改变 Liquid 对象的输出。他们被用在输出上，通过一个  <code>|</code>  符号分隔。</p><h2 id="操作符部分" tabindex="-1"><a class="header-anchor" href="#操作符部分"><span>操作符部分</span></a></h2><p>操作符部分仅区别于以下：</p><ol><li>逻辑与<code>and</code> 区别于 c 语言的 <code>&amp;&amp;</code></li><li>逻辑或 <code>or</code> 区别于 c 语言的 <code>||</code></li><li><code>contains</code>（包含）: <code>contains</code>  用于检查在一个字符串中是否存在某个子串。 <code>contains</code>  还可以用于检查一个字符串数组中是否存在某个字符串。</li></ol><h2 id="真值与假值" tabindex="-1"><a class="header-anchor" href="#真值与假值"><span>真值与假值</span></a></h2><p>这里注意 liquid 的一些语法特性： <strong>真值（truthy）</strong><strong>假值（falsy）</strong> 尽管对一些条件判断语句仍使用布尔值 true 和 false.但这里的写作习惯为以上 2 个。 注意，这里空值表示为<code>nil</code>,而并非<code>null</code>.</p>',8)),e("p",null,[e("a",c,[t[7]||(t[7]=o("字符串（String）")),n(r)]),t[8]||(t[8]=o("，即便是空字符串，也是真值（truthy）。"))]),t[22]||(t[22]=e("h2",{id:"数据类型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#数据类型"},[e("span",null,"数据类型")])],-1)),t[23]||(t[23]=e("p",null,"Liquid 对象的类型可以是以下五种：",-1)),e("ul",null,[e("li",null,[e("a",f,[t[9]||(t[9]=o("String")),n(r)])]),e("li",null,[e("a",q,[t[10]||(t[10]=o("Number")),n(r)])]),e("li",null,[e("a",m,[t[11]||(t[11]=o("Boolean")),n(r)])]),e("li",null,[e("a",h,[t[12]||(t[12]=o("Nil")),n(r)])]),e("li",null,[e("a",k,[t[13]||(t[13]=o("Array")),n(r)])])]),e("p",null,[t[16]||(t[16]=o("可以通过  ")),e("a",y,[t[14]||(t[14]=o("assign")),n(r)]),t[17]||(t[17]=o("  或  ")),e("a",L,[t[15]||(t[15]=o("capture")),n(r)]),t[18]||(t[18]=o("  标记来初始化 Liquid 变量。"))]),t[24]||(t[24]=s('<p>在数据类型方面区别于其他语言加了一个 Nil 类型，即空值类型。</p><p>初始化变量的时候使用 assign（分派，布置），这个在 Verilog 语言中同样存在。 capture 则不常见。</p><p>至于初始化数组，无法只通过 Liquid 语法初始化一个数组。</p><table><thead><tr><th>功能点</th><th><code>assign</code></th><th><code>capture</code></th></tr></thead><tbody><tr><td>用于什么？</td><td>简单变量赋值（数字、字符串、过滤器）</td><td>赋值为一整段内容（HTML/Liquid 混合块）</td></tr><tr><td>支持表达式？</td><td>✅（简单表达式/过滤器）</td><td>✅（块中可以使用变量、标签）</td></tr><tr><td>支持多行？</td><td>❌ 只能一行</td><td>✅ 支持任意多行</td></tr><tr><td>最终结果类型？</td><td>原始值或结果</td><td>字符串</td></tr><tr><td>类比编程语言</td><td><code>let x = 5;</code></td><td><code>let x = &quot;...block of rendered HTML...&quot;</code></td></tr></tbody></table><h2 id="控制输出的空白符" tabindex="-1"><a class="header-anchor" href="#控制输出的空白符"><span>控制输出的空白符</span></a></h2><p>在 Liquid 模版中，可以将连字符放在标记（tag）中，例如  <code>{{-</code>、<code>-}}</code>、<code>{%-</code>  和  <code>-%}</code>，用于将标记（tag）渲染之后的输出内容的左侧或右侧的空拍符剔除。 这个工作是必要的.</p><p>下一部分<a href="./Tags">Tags</a></p>',7))])}const T=d(p,[["render",x]]),S=JSON.parse('{"path":"/docs/shopify/Liquid.html","title":"Liquid","lang":"en-US","frontmatter":{"title":"Liquid","date":"2025-08-01T00:00:00.000Z","tags":["liquid"],"categories":["shopify"]},"headers":[{"level":2,"title":"操作符部分","slug":"操作符部分","link":"#操作符部分","children":[]},{"level":2,"title":"真值与假值","slug":"真值与假值","link":"#真值与假值","children":[]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":2,"title":"控制输出的空白符","slug":"控制输出的空白符","link":"#控制输出的空白符","children":[]}],"git":{"createdTime":1754271655000,"updatedTime":1754386143000,"contributors":[{"name":"AnteRay666","email":"3458403927@qq.com","commits":2}]},"filePathRelative":"docs/shopify/Liquid.md"}');export{T as comp,S as data};
