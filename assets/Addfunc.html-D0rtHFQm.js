import{_ as s,c as a,b as p,o as t}from"./app-D-LXcV_B.js";const e={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="快捷的添加功能" tabindex="-1"><a class="header-anchor" href="#快捷的添加功能"><span>快捷的添加功能</span></a></h1><p>很多时候，我们需要添加一个新的功能，但是会动原本的代码结构，这导致我们捉襟见肘。</p><p>所以，我对一个新的实验性的功能通常会留一个后门。这样会方便我们测试功能。。</p><p>从项目角度来看，如果我们需要 electron 的 ipc 通信功能，那么我们需要调整的方面有以下几点</p><ol><li>main.js 中，引用新的功能，并且在 proload.js 中暴露它。</li></ol><h2 id="嘿嘿" tabindex="-1"><a class="header-anchor" href="#嘿嘿"><span>嘿嘿</span></a></h2><p>在 electron 文件夹中新建一个文件夹 testipc</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">    ├── electron/  <span class="token comment"># Electron 相关文件夹，包含主进程和预加载脚本</span></span>
<span class="line">    ├── ├── testipc</span>
<span class="line">    │   │   ├── testipc.ts</span>
<span class="line">    │   │   ├── index.ts</span>
<span class="line">    │   │   └──</span>
<span class="line">    │   ├── electron-env.d.ts  <span class="token comment"># Electron 环境类型声明文件</span></span>
<span class="line">    │   ├── main.ts  <span class="token comment"># Electron 主进程入口文件</span></span>
<span class="line">    │   └── preload.ts  <span class="token comment"># Electron 预加载脚本文件</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明一下喵~</p><p>testipc 是自己新建的文件夹，其他什么名字都可以喵~</p><p>然后里面的 testipc.ts 同上，index.ts 不能变。</p><p>testipc/testipc.ts 的内容如下所示</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 这只是例子，在上方引入必要的文件</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ipcMain<span class="token punctuation">,</span> dialog<span class="token punctuation">,</span> shell <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;electron&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&quot;fs&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> os <span class="token keyword">from</span> <span class="token string">&quot;os&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;node:path&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 下面是正常的函数部分，</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getUserDataDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> username <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">userInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>username<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;C:&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Users&quot;</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> <span class="token string">&quot;AppData&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Local&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zjl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 注意导出函数喵</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 测试IPC的函数可以有多个，也可以只写一个</span></span>
<span class="line"><span class="token comment">// ipcMain.handle()是必要的哦，这个可以自定义你想要实现的功能，但是敲代码的时候需要用到很多很多东西。</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">registertextIPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  ipcMain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token string">&quot;get-data-storage-path&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">getSafeStoragePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  ipcMain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token string">&quot;load-folders&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  ipcMain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token string">&quot;save-folders&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> folders<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  ipcMain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token string">&quot;select-folder&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  ipcMain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token string">&quot;add-folder&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> folder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了喵，现在你可以写 testipc/index.ts 里的内容了</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 嘻嘻，将上面编写的可以导出的函数包装一下，这就是index.ts要干的事。</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ensureUserDataFile<span class="token punctuation">,</span> registertextIPC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./testipc.js&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">TestIPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">registertextIPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">ensureUserDataFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是的，testipc/index.ts 的内容就是如此简单，当然这是为了分化函数结构才这样设计的。</p><p>下面到我们的 main.ts 的编写了</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 根据你的目录结构导入你的功能代码</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> TestIPC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./testipc&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 然后根据详细需求，将函数作用于不同的域。比如这个注册IPC的函数需要放在app.whenReady().then()里面，不要问我为什么，请参考electron项目的生命周期</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">whenReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">TestIPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// add</span></span>
<span class="line">  <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>哎？？如果要问 createwindow()能不能从其他文件导入？能的，能的，兄弟，能的。</p><p>你可以创建一个 Window.ts，设定必要的参数，然后 import 即可。</p><ol start="2"><li>在前端测试界面通过 window.xxAPI.&lt;&gt;来测试它。</li></ol>`,21)]))}const i=s(e,[["render",c]]),u=JSON.parse('{"path":"/docs/Electron/Addfunc.html","title":"快捷的添加功能","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"嘿嘿","slug":"嘿嘿","link":"#嘿嘿","children":[]}],"git":{"createdTime":1754271655000,"updatedTime":1754271655000,"contributors":[{"name":"AnteRay666","email":"3458403927@qq.com","commits":1}]},"filePathRelative":"docs/Electron/Addfunc.md"}');export{i as comp,u as data};
